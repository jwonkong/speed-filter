// Generated by gencpp from file brain_msgs/Lanelet.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_LANELET_H
#define BRAIN_MSGS_MESSAGE_LANELET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <brain_msgs/RegulatoryElement.h>
#include <brain_msgs/Relation.h>
#include <brain_msgs/Relation.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct Lanelet_
{
  typedef Lanelet_<ContainerAllocator> Type;

  Lanelet_()
    : id(0)
    , type(0)
    , center_line()
    , left_boundary()
    , right_boundary()
    , regulatory_elements()
    , relation_from()
    , relation_to()  {
    }
  Lanelet_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , center_line(_alloc)
    , left_boundary(_alloc)
    , right_boundary(_alloc)
    , regulatory_elements(_alloc)
    , relation_from(_alloc)
    , relation_to(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _center_line_type;
  _center_line_type center_line;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _left_boundary_type;
  _left_boundary_type left_boundary;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _right_boundary_type;
  _right_boundary_type right_boundary;

   typedef std::vector< ::brain_msgs::RegulatoryElement_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >> _regulatory_elements_type;
  _regulatory_elements_type regulatory_elements;

   typedef std::vector< ::brain_msgs::Relation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::Relation_<ContainerAllocator> >> _relation_from_type;
  _relation_from_type relation_from;

   typedef std::vector< ::brain_msgs::Relation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::Relation_<ContainerAllocator> >> _relation_to_type;
  _relation_to_type relation_to;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(unknown)
  #undef unknown
#endif
#if defined(_WIN32) && defined(road)
  #undef road
#endif
#if defined(_WIN32) && defined(highway)
  #undef highway
#endif
#if defined(_WIN32) && defined(play_street)
  #undef play_street
#endif
#if defined(_WIN32) && defined(emergency_lane)
  #undef emergency_lane
#endif
#if defined(_WIN32) && defined(bus_lane)
  #undef bus_lane
#endif
#if defined(_WIN32) && defined(bicycle_lane)
  #undef bicycle_lane
#endif
#if defined(_WIN32) && defined(walkway)
  #undef walkway
#endif
#if defined(_WIN32) && defined(shared_walkway)
  #undef shared_walkway
#endif
#if defined(_WIN32) && defined(crosswalk)
  #undef crosswalk
#endif
#if defined(_WIN32) && defined(stairs)
  #undef stairs
#endif

  enum {
    unknown = 0u,
    road = 1u,
    highway = 2u,
    play_street = 3u,
    emergency_lane = 4u,
    bus_lane = 5u,
    bicycle_lane = 6u,
    walkway = 7u,
    shared_walkway = 8u,
    crosswalk = 9u,
    stairs = 10u,
  };


  typedef boost::shared_ptr< ::brain_msgs::Lanelet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::Lanelet_<ContainerAllocator> const> ConstPtr;

}; // struct Lanelet_

typedef ::brain_msgs::Lanelet_<std::allocator<void> > Lanelet;

typedef boost::shared_ptr< ::brain_msgs::Lanelet > LaneletPtr;
typedef boost::shared_ptr< ::brain_msgs::Lanelet const> LaneletConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::Lanelet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::Lanelet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::Lanelet_<ContainerAllocator1> & lhs, const ::brain_msgs::Lanelet_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.center_line == rhs.center_line &&
    lhs.left_boundary == rhs.left_boundary &&
    lhs.right_boundary == rhs.right_boundary &&
    lhs.regulatory_elements == rhs.regulatory_elements &&
    lhs.relation_from == rhs.relation_from &&
    lhs.relation_to == rhs.relation_to;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::Lanelet_<ContainerAllocator1> & lhs, const ::brain_msgs::Lanelet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Lanelet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Lanelet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Lanelet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Lanelet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Lanelet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Lanelet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::Lanelet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c2665c0ccdcf8f7a012661f9f3872d89";
  }

  static const char* value(const ::brain_msgs::Lanelet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc2665c0ccdcf8f7aULL;
  static const uint64_t static_value2 = 0x012661f9f3872d89ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::Lanelet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/Lanelet";
  }

  static const char* value(const ::brain_msgs::Lanelet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::Lanelet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64                           id\n"
"\n"
"uint8                           type\n"
"uint8                           unknown=0\n"
"uint8                           road=1\n"
"uint8                           highway=2\n"
"uint8                           play_street=3\n"
"uint8                           emergency_lane=4\n"
"uint8                           bus_lane=5\n"
"uint8                           bicycle_lane=6\n"
"uint8                           walkway=7\n"
"uint8                           shared_walkway=8\n"
"uint8                           crosswalk=9\n"
"uint8                           stairs=10\n"
"\n"
"geometry_msgs/Point[]           center_line\n"
"geometry_msgs/Point[]           left_boundary\n"
"geometry_msgs/Point[]           right_boundary\n"
"brain_msgs/RegulatoryElement[]  regulatory_elements\n"
"\n"
"brain_msgs/Relation[]           relation_from \n"
"brain_msgs/Relation[]           relation_to \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/RegulatoryElement\n"
"int64                 id\n"
"int64                 intersection_id\n"
"int64                 group_id\n"
"\n"
"uint8                 type\n"
"uint8                 traffic_sign=0\n"
"uint8                 traffic_light=1\n"
"uint8                 speed_limit=2\n"
"uint8                 right_of_way=3\n"
"uint8                 all_way_stop=4\n"
"\n"
"uint8                 subtype\n"
"\n"
"uint8                 traffic_sign_unknown=0\n"
"uint8                 traffic_sign_school_zone=1\n"
"uint8                 traffic_sign_speed_bump=2\n"
"\n"
"uint8                 traffic_light_unknown=0\n"
"uint8                 traffic_light_red=1\n"
"uint8                 traffic_light_red_left=2\n"
"uint8                 traffic_light_yellow=3\n"
"uint8                 traffic_light_green=4\n"
"uint8                 traffic_light_green_left=5\n"
"\n"
"uint8                 speed_limit_5=5\n"
"uint8                 speed_limit_10=10\n"
"uint8                 speed_limit_15=15\n"
"uint8                 speed_limit_20=20\n"
"uint8                 speed_limit_30=30\n"
"uint8                 speed_limit_40=40\n"
"uint8                 speed_limit_50=50\n"
"uint8                 speed_limit_60=60\n"
"uint8                 speed_limit_70=70\n"
"uint8                 speed_limit_80=80\n"
"uint8                 speed_limit_90=90\n"
"uint8                 speed_limit_100=100\n"
"\n"
"float32               remaining_time\n"
"\n"
"geometry_msgs/Point[] refers\n"
"geometry_msgs/Point[] ref_line\n"
"geometry_msgs/Point[] cancels\n"
"geometry_msgs/Point[] cancel_line\n"
"================================================================================\n"
"MSG: brain_msgs/Relation\n"
"int64 id \n"
"uint8 relation\n"
"uint8 unknown=0\n"
"uint8 lane_keeping=1\n"
"uint8 change_left=2\n"
"uint8 change_right=3\n"
"uint8 adjacent_left=4\n"
"uint8 adjacent_right=5\n"
"uint8 conflict=6\n"
"uint8 area=7\n"
;
  }

  static const char* value(const ::brain_msgs::Lanelet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::Lanelet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.center_line);
      stream.next(m.left_boundary);
      stream.next(m.right_boundary);
      stream.next(m.regulatory_elements);
      stream.next(m.relation_from);
      stream.next(m.relation_to);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lanelet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::Lanelet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::Lanelet_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "center_line[]" << std::endl;
    for (size_t i = 0; i < v.center_line.size(); ++i)
    {
      s << indent << "  center_line[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.center_line[i]);
    }
    s << indent << "left_boundary[]" << std::endl;
    for (size_t i = 0; i < v.left_boundary.size(); ++i)
    {
      s << indent << "  left_boundary[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.left_boundary[i]);
    }
    s << indent << "right_boundary[]" << std::endl;
    for (size_t i = 0; i < v.right_boundary.size(); ++i)
    {
      s << indent << "  right_boundary[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.right_boundary[i]);
    }
    s << indent << "regulatory_elements[]" << std::endl;
    for (size_t i = 0; i < v.regulatory_elements.size(); ++i)
    {
      s << indent << "  regulatory_elements[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >::stream(s, indent + "    ", v.regulatory_elements[i]);
    }
    s << indent << "relation_from[]" << std::endl;
    for (size_t i = 0; i < v.relation_from.size(); ++i)
    {
      s << indent << "  relation_from[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::Relation_<ContainerAllocator> >::stream(s, indent + "    ", v.relation_from[i]);
    }
    s << indent << "relation_to[]" << std::endl;
    for (size_t i = 0; i < v.relation_to.size(); ++i)
    {
      s << indent << "  relation_to[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::Relation_<ContainerAllocator> >::stream(s, indent + "    ", v.relation_to[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_LANELET_H
