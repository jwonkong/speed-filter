// Generated by gencpp from file brain_msgs/Relation.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_RELATION_H
#define BRAIN_MSGS_MESSAGE_RELATION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace brain_msgs
{
template <class ContainerAllocator>
struct Relation_
{
  typedef Relation_<ContainerAllocator> Type;

  Relation_()
    : id(0)
    , relation(0)  {
    }
  Relation_(const ContainerAllocator& _alloc)
    : id(0)
    , relation(0)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef uint8_t _relation_type;
  _relation_type relation;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(unknown)
  #undef unknown
#endif
#if defined(_WIN32) && defined(lane_keeping)
  #undef lane_keeping
#endif
#if defined(_WIN32) && defined(change_left)
  #undef change_left
#endif
#if defined(_WIN32) && defined(change_right)
  #undef change_right
#endif
#if defined(_WIN32) && defined(adjacent_left)
  #undef adjacent_left
#endif
#if defined(_WIN32) && defined(adjacent_right)
  #undef adjacent_right
#endif
#if defined(_WIN32) && defined(conflict)
  #undef conflict
#endif
#if defined(_WIN32) && defined(area)
  #undef area
#endif

  enum {
    unknown = 0u,
    lane_keeping = 1u,
    change_left = 2u,
    change_right = 3u,
    adjacent_left = 4u,
    adjacent_right = 5u,
    conflict = 6u,
    area = 7u,
  };


  typedef boost::shared_ptr< ::brain_msgs::Relation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::Relation_<ContainerAllocator> const> ConstPtr;

}; // struct Relation_

typedef ::brain_msgs::Relation_<std::allocator<void> > Relation;

typedef boost::shared_ptr< ::brain_msgs::Relation > RelationPtr;
typedef boost::shared_ptr< ::brain_msgs::Relation const> RelationConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::Relation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::Relation_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::Relation_<ContainerAllocator1> & lhs, const ::brain_msgs::Relation_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.relation == rhs.relation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::Relation_<ContainerAllocator1> & lhs, const ::brain_msgs::Relation_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Relation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Relation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Relation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Relation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Relation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Relation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::Relation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42138fab583571fe478ee41ebad887ee";
  }

  static const char* value(const ::brain_msgs::Relation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42138fab583571feULL;
  static const uint64_t static_value2 = 0x478ee41ebad887eeULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::Relation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/Relation";
  }

  static const char* value(const ::brain_msgs::Relation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::Relation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 id \n"
"uint8 relation\n"
"uint8 unknown=0\n"
"uint8 lane_keeping=1\n"
"uint8 change_left=2\n"
"uint8 change_right=3\n"
"uint8 adjacent_left=4\n"
"uint8 adjacent_right=5\n"
"uint8 conflict=6\n"
"uint8 area=7\n"
;
  }

  static const char* value(const ::brain_msgs::Relation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::Relation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.relation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Relation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::Relation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::Relation_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "relation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_RELATION_H
