// Generated by gencpp from file brain_msgs/TrafficLightArray.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_TRAFFICLIGHTARRAY_H
#define BRAIN_MSGS_MESSAGE_TRAFFICLIGHTARRAY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <brain_msgs/TrafficLight.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct TrafficLightArray_
{
  typedef TrafficLightArray_<ContainerAllocator> Type;

  TrafficLightArray_()
    : header()
    , traffic_lights()  {
    }
  TrafficLightArray_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , traffic_lights(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::brain_msgs::TrafficLight_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::TrafficLight_<ContainerAllocator> >> _traffic_lights_type;
  _traffic_lights_type traffic_lights;





  typedef boost::shared_ptr< ::brain_msgs::TrafficLightArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::TrafficLightArray_<ContainerAllocator> const> ConstPtr;

}; // struct TrafficLightArray_

typedef ::brain_msgs::TrafficLightArray_<std::allocator<void> > TrafficLightArray;

typedef boost::shared_ptr< ::brain_msgs::TrafficLightArray > TrafficLightArrayPtr;
typedef boost::shared_ptr< ::brain_msgs::TrafficLightArray const> TrafficLightArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::TrafficLightArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::TrafficLightArray_<ContainerAllocator1> & lhs, const ::brain_msgs::TrafficLightArray_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.traffic_lights == rhs.traffic_lights;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::TrafficLightArray_<ContainerAllocator1> & lhs, const ::brain_msgs::TrafficLightArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::TrafficLightArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::TrafficLightArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::TrafficLightArray_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5e2c7dd2e8f42f992ebcf9a0efaf188c";
  }

  static const char* value(const ::brain_msgs::TrafficLightArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5e2c7dd2e8f42f99ULL;
  static const uint64_t static_value2 = 0x2ebcf9a0efaf188cULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/TrafficLightArray";
  }

  static const char* value(const ::brain_msgs::TrafficLightArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"brain_msgs/TrafficLight[] traffic_lights\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/TrafficLight\n"
"# This message defines meta information for a traffic light status\n"
"std_msgs/Header header\n"
"\n"
"# The result as provided by the tlr nodes\n"
"# Red and Yellow states are both treated as STOP\n"
"uint8 state\n"
"uint8 unknown    = 0\n"
"uint8 red        = 1\n"
"uint8 yellow     = 2\n"
"uint8 green      = 3\n"
"uint8 green_left = 4\n"
"uint8 red_left   = 5\n"
"\n"
"# Probability of state [0,1]\n"
"# if is_its is true, it is set to be 1\n"
"float32 state_probability\n"
"\n"
"# type\n"
"uint8 type\n"
"# uint8 UNKNOWN = 0\n"
"uint8 str       = 1\n"
"uint8 left      = 2\n"
"uint8 ped       = 3\n"
"uint8 uturn     = 4\n"
"\n"
"\n"
"## --------------------\n"
"## ITS ONLY INFORMATION\n"
"# true when it comes from ITS\n"
"bool is_its\n"
"\n"
"# available when is_its is true\n"
"int64 intersection_id\n"
"\n"
"# ID is avalialbe, if is_its is true\n"
"int64 group_id\n"
"\n"
"# remaining time to be changed\n"
"float32 end_time # [sec]\n"
"## --------------------\n"
"\n"
"\n"
"## --------------------\n"
"## INFORMATION FROM DETECTION AND TRACKING\n"
"# Perception procssing level\n"
"uint8 level\n"
"uint8 detected=1\n"
"uint8 tracked=2\n"
"uint8 fused=3\n"
"uint8 predicted=4\n"
"\n"
"# ID is avaliable, if perception level is tracking\n"
"int64 track_id\n"
"\n"
"# Positional information of the traffic light information\n"
"geometry_msgs/PoseWithCovariance pose\n"
"## --------------------\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::brain_msgs::TrafficLightArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.traffic_lights);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrafficLightArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::TrafficLightArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::TrafficLightArray_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "traffic_lights[]" << std::endl;
    for (size_t i = 0; i < v.traffic_lights.size(); ++i)
    {
      s << indent << "  traffic_lights[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::TrafficLight_<ContainerAllocator> >::stream(s, indent + "    ", v.traffic_lights[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_TRAFFICLIGHTARRAY_H
