// Generated by gencpp from file brain_msgs/VehicleResponse.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_VEHICLERESPONSE_H
#define BRAIN_MSGS_MESSAGE_VEHICLERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <brain_msgs/Wgs84.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct VehicleResponse_
{
  typedef VehicleResponse_<ContainerAllocator> Type;

  VehicleResponse_()
    : header()
    , response(0)
    , gnss()  {
    }
  VehicleResponse_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , response(0)
    , gnss(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _response_type;
  _response_type response;

   typedef  ::brain_msgs::Wgs84_<ContainerAllocator>  _gnss_type;
  _gnss_type gnss;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(unknown)
  #undef unknown
#endif
#if defined(_WIN32) && defined(ready)
  #undef ready
#endif
#if defined(_WIN32) && defined(waiting)
  #undef waiting
#endif
#if defined(_WIN32) && defined(driving)
  #undef driving
#endif
#if defined(_WIN32) && defined(parking)
  #undef parking
#endif
#if defined(_WIN32) && defined(complete)
  #undef complete
#endif

  enum {
    unknown = 0u,
    ready = 1u,
    waiting = 2u,
    driving = 3u,
    parking = 4u,
    complete = 5u,
  };


  typedef boost::shared_ptr< ::brain_msgs::VehicleResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::VehicleResponse_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleResponse_

typedef ::brain_msgs::VehicleResponse_<std::allocator<void> > VehicleResponse;

typedef boost::shared_ptr< ::brain_msgs::VehicleResponse > VehicleResponsePtr;
typedef boost::shared_ptr< ::brain_msgs::VehicleResponse const> VehicleResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::VehicleResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::VehicleResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::VehicleResponse_<ContainerAllocator1> & lhs, const ::brain_msgs::VehicleResponse_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.response == rhs.response &&
    lhs.gnss == rhs.gnss;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::VehicleResponse_<ContainerAllocator1> & lhs, const ::brain_msgs::VehicleResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::VehicleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::VehicleResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::VehicleResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::VehicleResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::VehicleResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::VehicleResponse_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::VehicleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23bd740caef9171c2c10b0db40fe748d";
  }

  static const char* value(const ::brain_msgs::VehicleResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23bd740caef9171cULL;
  static const uint64_t static_value2 = 0x2c10b0db40fe748dULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::VehicleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/VehicleResponse";
  }

  static const char* value(const ::brain_msgs::VehicleResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::VehicleResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header   header\n"
"\n"
"uint8             response\n"
"uint8             unknown=0\n"
"uint8             ready=1\n"
"uint8             waiting=2\n"
"uint8             driving=3\n"
"uint8             parking=4\n"
"uint8             complete=5\n"
"\n"
"brain_msgs/Wgs84  gnss\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/Wgs84\n"
"float64 latitude\n"
"float64 longitude\n"
"float32 height\n"
"float32 heading\n"
"uint8 status\n"
"uint8 valid=0\n"
"uint8 invalid=1\n"
;
  }

  static const char* value(const ::brain_msgs::VehicleResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::VehicleResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.response);
      stream.next(m.gnss);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::VehicleResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::VehicleResponse_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "response: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.response);
    s << indent << "gnss: ";
    s << std::endl;
    Printer< ::brain_msgs::Wgs84_<ContainerAllocator> >::stream(s, indent + "  ", v.gnss);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_VEHICLERESPONSE_H
