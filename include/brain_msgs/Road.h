// Generated by gencpp from file brain_msgs/Road.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_ROAD_H
#define BRAIN_MSGS_MESSAGE_ROAD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <brain_msgs/Route.h>
#include <brain_msgs/LanePath.h>
#include <brain_msgs/Lanelet.h>
#include <brain_msgs/Area.h>
#include <geometry_msgs/Pose.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct Road_
{
  typedef Road_<ContainerAllocator> Type;

  Road_()
    : header()
    , route()
    , path()
    , lanes()
    , areas()
    , goal()  {
    }
  Road_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , route(_alloc)
    , path(_alloc)
    , lanes(_alloc)
    , areas(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::brain_msgs::Route_<ContainerAllocator>  _route_type;
  _route_type route;

   typedef  ::brain_msgs::LanePath_<ContainerAllocator>  _path_type;
  _path_type path;

   typedef std::vector< ::brain_msgs::Lanelet_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::Lanelet_<ContainerAllocator> >> _lanes_type;
  _lanes_type lanes;

   typedef std::vector< ::brain_msgs::Area_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::Area_<ContainerAllocator> >> _areas_type;
  _areas_type areas;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::brain_msgs::Road_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::Road_<ContainerAllocator> const> ConstPtr;

}; // struct Road_

typedef ::brain_msgs::Road_<std::allocator<void> > Road;

typedef boost::shared_ptr< ::brain_msgs::Road > RoadPtr;
typedef boost::shared_ptr< ::brain_msgs::Road const> RoadConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::Road_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::Road_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::Road_<ContainerAllocator1> & lhs, const ::brain_msgs::Road_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.route == rhs.route &&
    lhs.path == rhs.path &&
    lhs.lanes == rhs.lanes &&
    lhs.areas == rhs.areas &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::Road_<ContainerAllocator1> & lhs, const ::brain_msgs::Road_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Road_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Road_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Road_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Road_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Road_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Road_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::Road_<ContainerAllocator> >
{
  static const char* value()
  {
    return "358786412a98cd5450eb03495459998b";
  }

  static const char* value(const ::brain_msgs::Road_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x358786412a98cd54ULL;
  static const uint64_t static_value2 = 0x50eb03495459998bULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::Road_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/Road";
  }

  static const char* value(const ::brain_msgs::Road_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::Road_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header       header \n"
"brain_msgs/Route      route\n"
"brain_msgs/LanePath   path\n"
"\n"
"brain_msgs/Lanelet[]  lanes\n"
"brain_msgs/Area[]     areas\n"
"geometry_msgs/Pose    goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/Route\n"
"brain_msgs/Relation[] route\n"
"================================================================================\n"
"MSG: brain_msgs/Relation\n"
"int64 id \n"
"uint8 relation\n"
"uint8 unknown=0\n"
"uint8 lane_keeping=1\n"
"uint8 change_left=2\n"
"uint8 change_right=3\n"
"uint8 adjacent_left=4\n"
"uint8 adjacent_right=5\n"
"uint8 conflict=6\n"
"uint8 area=7\n"
"================================================================================\n"
"MSG: brain_msgs/LanePath\n"
"brain_msgs/Relation[] path\n"
"================================================================================\n"
"MSG: brain_msgs/Lanelet\n"
"int64                           id\n"
"\n"
"uint8                           type\n"
"uint8                           unknown=0\n"
"uint8                           road=1\n"
"uint8                           highway=2\n"
"uint8                           play_street=3\n"
"uint8                           emergency_lane=4\n"
"uint8                           bus_lane=5\n"
"uint8                           bicycle_lane=6\n"
"uint8                           walkway=7\n"
"uint8                           shared_walkway=8\n"
"uint8                           crosswalk=9\n"
"uint8                           stairs=10\n"
"\n"
"geometry_msgs/Point[]           center_line\n"
"geometry_msgs/Point[]           left_boundary\n"
"geometry_msgs/Point[]           right_boundary\n"
"brain_msgs/RegulatoryElement[]  regulatory_elements\n"
"\n"
"brain_msgs/Relation[]           relation_from \n"
"brain_msgs/Relation[]           relation_to \n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/RegulatoryElement\n"
"int64                 id\n"
"int64                 intersection_id\n"
"int64                 group_id\n"
"\n"
"uint8                 type\n"
"uint8                 traffic_sign=0\n"
"uint8                 traffic_light=1\n"
"uint8                 speed_limit=2\n"
"uint8                 right_of_way=3\n"
"uint8                 all_way_stop=4\n"
"\n"
"uint8                 subtype\n"
"\n"
"uint8                 traffic_sign_unknown=0\n"
"uint8                 traffic_sign_school_zone=1\n"
"uint8                 traffic_sign_speed_bump=2\n"
"\n"
"uint8                 traffic_light_unknown=0\n"
"uint8                 traffic_light_red=1\n"
"uint8                 traffic_light_red_left=2\n"
"uint8                 traffic_light_yellow=3\n"
"uint8                 traffic_light_green=4\n"
"uint8                 traffic_light_green_left=5\n"
"\n"
"uint8                 speed_limit_5=5\n"
"uint8                 speed_limit_10=10\n"
"uint8                 speed_limit_15=15\n"
"uint8                 speed_limit_20=20\n"
"uint8                 speed_limit_30=30\n"
"uint8                 speed_limit_40=40\n"
"uint8                 speed_limit_50=50\n"
"uint8                 speed_limit_60=60\n"
"uint8                 speed_limit_70=70\n"
"uint8                 speed_limit_80=80\n"
"uint8                 speed_limit_90=90\n"
"uint8                 speed_limit_100=100\n"
"\n"
"float32               remaining_time\n"
"\n"
"geometry_msgs/Point[] refers\n"
"geometry_msgs/Point[] ref_line\n"
"geometry_msgs/Point[] cancels\n"
"geometry_msgs/Point[] cancel_line\n"
"================================================================================\n"
"MSG: brain_msgs/Area\n"
"int64                           id\n"
"\n"
"uint8                           type\n"
"uint8                           unknown=0\n"
"uint8                           parking=1\n"
"uint8                           freespace=2\n"
"uint8                           vegetation=3\n"
"uint8                           building=4\n"
"uint8                           traffic_island=5\n"
"uint8                           exit=6\n"
"\n"
"geometry_msgs/Polygon           outer\n"
"geometry_msgs/Polygon[]         inners\n"
"brain_msgs/RegulatoryElement[]  regulatory_elements\n"
"brain_msgs/Relation[]           relation_from\n"
"brain_msgs/Relation[]           relation_to\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::brain_msgs::Road_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::Road_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.route);
      stream.next(m.path);
      stream.next(m.lanes);
      stream.next(m.areas);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Road_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::Road_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::Road_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "route: ";
    s << std::endl;
    Printer< ::brain_msgs::Route_<ContainerAllocator> >::stream(s, indent + "  ", v.route);
    s << indent << "path: ";
    s << std::endl;
    Printer< ::brain_msgs::LanePath_<ContainerAllocator> >::stream(s, indent + "  ", v.path);
    s << indent << "lanes[]" << std::endl;
    for (size_t i = 0; i < v.lanes.size(); ++i)
    {
      s << indent << "  lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::Lanelet_<ContainerAllocator> >::stream(s, indent + "    ", v.lanes[i]);
    }
    s << indent << "areas[]" << std::endl;
    for (size_t i = 0; i < v.areas.size(); ++i)
    {
      s << indent << "  areas[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::Area_<ContainerAllocator> >::stream(s, indent + "    ", v.areas[i]);
    }
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_ROAD_H
