// Generated by gencpp from file brain_msgs/FreespacePoint.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_FREESPACEPOINT_H
#define BRAIN_MSGS_MESSAGE_FREESPACEPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace brain_msgs
{
template <class ContainerAllocator>
struct FreespacePoint_
{
  typedef FreespacePoint_<ContainerAllocator> Type;

  FreespacePoint_()
    : distance(0.0)
    , yaw(0.0)
    , probability(0.0)  {
    }
  FreespacePoint_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , yaw(0.0)
    , probability(0.0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _probability_type;
  _probability_type probability;





  typedef boost::shared_ptr< ::brain_msgs::FreespacePoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::FreespacePoint_<ContainerAllocator> const> ConstPtr;

}; // struct FreespacePoint_

typedef ::brain_msgs::FreespacePoint_<std::allocator<void> > FreespacePoint;

typedef boost::shared_ptr< ::brain_msgs::FreespacePoint > FreespacePointPtr;
typedef boost::shared_ptr< ::brain_msgs::FreespacePoint const> FreespacePointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::FreespacePoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::FreespacePoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::FreespacePoint_<ContainerAllocator1> & lhs, const ::brain_msgs::FreespacePoint_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.yaw == rhs.yaw &&
    lhs.probability == rhs.probability;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::FreespacePoint_<ContainerAllocator1> & lhs, const ::brain_msgs::FreespacePoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::FreespacePoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::FreespacePoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::FreespacePoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::FreespacePoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::FreespacePoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::FreespacePoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::FreespacePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "220874171ddd5f1a878fb85835853742";
  }

  static const char* value(const ::brain_msgs::FreespacePoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x220874171ddd5f1aULL;
  static const uint64_t static_value2 = 0x878fb85835853742ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::FreespacePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/FreespacePoint";
  }

  static const char* value(const ::brain_msgs::FreespacePoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::FreespacePoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 distance\n"
"float32 yaw\n"
"float32 probability\n"
;
  }

  static const char* value(const ::brain_msgs::FreespacePoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::FreespacePoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.yaw);
      stream.next(m.probability);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FreespacePoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::FreespacePoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::FreespacePoint_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "probability: ";
    Printer<float>::stream(s, indent + "  ", v.probability);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_FREESPACEPOINT_H
