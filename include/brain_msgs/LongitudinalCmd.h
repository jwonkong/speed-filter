// Generated by gencpp from file brain_msgs/LongitudinalCmd.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_LONGITUDINALCMD_H
#define BRAIN_MSGS_MESSAGE_LONGITUDINALCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <brain_msgs/Gear.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct LongitudinalCmd_
{
  typedef LongitudinalCmd_<ContainerAllocator> Type;

  LongitudinalCmd_()
    : header()
    , mode(0)
    , velocity(0.0)
    , acceleration(0.0)
    , torque(0.0)
    , acc_pos(0.0)
    , acc_torque(0.0)
    , brk_pos(0.0)
    , brk_torque(0.0)
    , distance_error(0.0)
    , speed_error(0.0)
    , gear()  {
    }
  LongitudinalCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , velocity(0.0)
    , acceleration(0.0)
    , torque(0.0)
    , acc_pos(0.0)
    , acc_torque(0.0)
    , brk_pos(0.0)
    , brk_torque(0.0)
    , distance_error(0.0)
    , speed_error(0.0)
    , gear(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef float _velocity_type;
  _velocity_type velocity;

   typedef float _acceleration_type;
  _acceleration_type acceleration;

   typedef float _torque_type;
  _torque_type torque;

   typedef float _acc_pos_type;
  _acc_pos_type acc_pos;

   typedef float _acc_torque_type;
  _acc_torque_type acc_torque;

   typedef float _brk_pos_type;
  _brk_pos_type brk_pos;

   typedef float _brk_torque_type;
  _brk_torque_type brk_torque;

   typedef float _distance_error_type;
  _distance_error_type distance_error;

   typedef float _speed_error_type;
  _speed_error_type speed_error;

   typedef  ::brain_msgs::Gear_<ContainerAllocator>  _gear_type;
  _gear_type gear;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(inactive)
  #undef inactive
#endif
#if defined(_WIN32) && defined(mode_acceleration)
  #undef mode_acceleration
#endif
#if defined(_WIN32) && defined(mode_torque)
  #undef mode_torque
#endif
#if defined(_WIN32) && defined(mode_pedal_position)
  #undef mode_pedal_position
#endif
#if defined(_WIN32) && defined(mode_pedal_torque)
  #undef mode_pedal_torque
#endif
#if defined(_WIN32) && defined(mode_acc_pos_brk_torque)
  #undef mode_acc_pos_brk_torque
#endif
#if defined(_WIN32) && defined(mode_acc_torque_brk_pos)
  #undef mode_acc_torque_brk_pos
#endif

  enum {
    inactive = 0u,
    mode_acceleration = 1u,
    mode_torque = 2u,
    mode_pedal_position = 3u,
    mode_pedal_torque = 4u,
    mode_acc_pos_brk_torque = 5u,
    mode_acc_torque_brk_pos = 6u,
  };


  typedef boost::shared_ptr< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> const> ConstPtr;

}; // struct LongitudinalCmd_

typedef ::brain_msgs::LongitudinalCmd_<std::allocator<void> > LongitudinalCmd;

typedef boost::shared_ptr< ::brain_msgs::LongitudinalCmd > LongitudinalCmdPtr;
typedef boost::shared_ptr< ::brain_msgs::LongitudinalCmd const> LongitudinalCmdConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::LongitudinalCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::LongitudinalCmd_<ContainerAllocator1> & lhs, const ::brain_msgs::LongitudinalCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.torque == rhs.torque &&
    lhs.acc_pos == rhs.acc_pos &&
    lhs.acc_torque == rhs.acc_torque &&
    lhs.brk_pos == rhs.brk_pos &&
    lhs.brk_torque == rhs.brk_torque &&
    lhs.distance_error == rhs.distance_error &&
    lhs.speed_error == rhs.speed_error &&
    lhs.gear == rhs.gear;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::LongitudinalCmd_<ContainerAllocator1> & lhs, const ::brain_msgs::LongitudinalCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9fe6cc6ecce0463eb4c851aa73dbf09";
  }

  static const char* value(const ::brain_msgs::LongitudinalCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9fe6cc6ecce0463ULL;
  static const uint64_t static_value2 = 0xeb4c851aa73dbf09ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/LongitudinalCmd";
  }

  static const char* value(const ::brain_msgs::LongitudinalCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint8 mode \n"
"uint8 inactive=0\n"
"uint8 mode_acceleration=1\n"
"uint8 mode_torque=2\n"
"uint8 mode_pedal_position=3\n"
"uint8 mode_pedal_torque=4\n"
"uint8 mode_acc_pos_brk_torque=5\n"
"uint8 mode_acc_torque_brk_pos=6\n"
"\n"
"float32 velocity\n"
"float32 acceleration\n"
"float32 torque\n"
"float32 acc_pos\n"
"float32 acc_torque\n"
"float32 brk_pos\n"
"float32 brk_torque \n"
"float32 distance_error\n"
"float32 speed_error\n"
"\n"
"brain_msgs/Gear gear\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/Gear\n"
"uint8 gear\n"
"uint8 inactive=0\n"
"uint8 gear_p=1\n"
"uint8 gear_r=2\n"
"uint8 gear_n=3\n"
"uint8 gear_d=4\n"
;
  }

  static const char* value(const ::brain_msgs::LongitudinalCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.torque);
      stream.next(m.acc_pos);
      stream.next(m.acc_torque);
      stream.next(m.brk_pos);
      stream.next(m.brk_torque);
      stream.next(m.distance_error);
      stream.next(m.speed_error);
      stream.next(m.gear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LongitudinalCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::LongitudinalCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "velocity: ";
    Printer<float>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.acceleration);
    s << indent << "torque: ";
    Printer<float>::stream(s, indent + "  ", v.torque);
    s << indent << "acc_pos: ";
    Printer<float>::stream(s, indent + "  ", v.acc_pos);
    s << indent << "acc_torque: ";
    Printer<float>::stream(s, indent + "  ", v.acc_torque);
    s << indent << "brk_pos: ";
    Printer<float>::stream(s, indent + "  ", v.brk_pos);
    s << indent << "brk_torque: ";
    Printer<float>::stream(s, indent + "  ", v.brk_torque);
    s << indent << "distance_error: ";
    Printer<float>::stream(s, indent + "  ", v.distance_error);
    s << indent << "speed_error: ";
    Printer<float>::stream(s, indent + "  ", v.speed_error);
    s << indent << "gear: ";
    s << std::endl;
    Printer< ::brain_msgs::Gear_<ContainerAllocator> >::stream(s, indent + "  ", v.gear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_LONGITUDINALCMD_H
