// Generated by gencpp from file brain_msgs/Area.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_AREA_H
#define BRAIN_MSGS_MESSAGE_AREA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>
#include <brain_msgs/RegulatoryElement.h>
#include <brain_msgs/Relation.h>
#include <brain_msgs/Relation.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct Area_
{
  typedef Area_<ContainerAllocator> Type;

  Area_()
    : id(0)
    , type(0)
    , outer()
    , inners()
    , regulatory_elements()
    , relation_from()
    , relation_to()  {
    }
  Area_(const ContainerAllocator& _alloc)
    : id(0)
    , type(0)
    , outer(_alloc)
    , inners(_alloc)
    , regulatory_elements(_alloc)
    , relation_from(_alloc)
    , relation_to(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _outer_type;
  _outer_type outer;

   typedef std::vector< ::geometry_msgs::Polygon_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Polygon_<ContainerAllocator> >> _inners_type;
  _inners_type inners;

   typedef std::vector< ::brain_msgs::RegulatoryElement_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >> _regulatory_elements_type;
  _regulatory_elements_type regulatory_elements;

   typedef std::vector< ::brain_msgs::Relation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::Relation_<ContainerAllocator> >> _relation_from_type;
  _relation_from_type relation_from;

   typedef std::vector< ::brain_msgs::Relation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::Relation_<ContainerAllocator> >> _relation_to_type;
  _relation_to_type relation_to;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(unknown)
  #undef unknown
#endif
#if defined(_WIN32) && defined(parking)
  #undef parking
#endif
#if defined(_WIN32) && defined(freespace)
  #undef freespace
#endif
#if defined(_WIN32) && defined(vegetation)
  #undef vegetation
#endif
#if defined(_WIN32) && defined(building)
  #undef building
#endif
#if defined(_WIN32) && defined(traffic_island)
  #undef traffic_island
#endif
#if defined(_WIN32) && defined(exit)
  #undef exit
#endif

  enum {
    unknown = 0u,
    parking = 1u,
    freespace = 2u,
    vegetation = 3u,
    building = 4u,
    traffic_island = 5u,
    exit = 6u,
  };


  typedef boost::shared_ptr< ::brain_msgs::Area_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::Area_<ContainerAllocator> const> ConstPtr;

}; // struct Area_

typedef ::brain_msgs::Area_<std::allocator<void> > Area;

typedef boost::shared_ptr< ::brain_msgs::Area > AreaPtr;
typedef boost::shared_ptr< ::brain_msgs::Area const> AreaConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::Area_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::Area_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::Area_<ContainerAllocator1> & lhs, const ::brain_msgs::Area_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.type == rhs.type &&
    lhs.outer == rhs.outer &&
    lhs.inners == rhs.inners &&
    lhs.regulatory_elements == rhs.regulatory_elements &&
    lhs.relation_from == rhs.relation_from &&
    lhs.relation_to == rhs.relation_to;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::Area_<ContainerAllocator1> & lhs, const ::brain_msgs::Area_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Area_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Area_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Area_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Area_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Area_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Area_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::Area_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8b2946992c378bc06d3bc00450ebdfc7";
  }

  static const char* value(const ::brain_msgs::Area_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8b2946992c378bc0ULL;
  static const uint64_t static_value2 = 0x6d3bc00450ebdfc7ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::Area_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/Area";
  }

  static const char* value(const ::brain_msgs::Area_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::Area_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64                           id\n"
"\n"
"uint8                           type\n"
"uint8                           unknown=0\n"
"uint8                           parking=1\n"
"uint8                           freespace=2\n"
"uint8                           vegetation=3\n"
"uint8                           building=4\n"
"uint8                           traffic_island=5\n"
"uint8                           exit=6\n"
"\n"
"geometry_msgs/Polygon           outer\n"
"geometry_msgs/Polygon[]         inners\n"
"brain_msgs/RegulatoryElement[]  regulatory_elements\n"
"brain_msgs/Relation[]           relation_from\n"
"brain_msgs/Relation[]           relation_to\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: brain_msgs/RegulatoryElement\n"
"int64                 id\n"
"int64                 intersection_id\n"
"int64                 group_id\n"
"\n"
"uint8                 type\n"
"uint8                 traffic_sign=0\n"
"uint8                 traffic_light=1\n"
"uint8                 speed_limit=2\n"
"uint8                 right_of_way=3\n"
"uint8                 all_way_stop=4\n"
"\n"
"uint8                 subtype\n"
"\n"
"uint8                 traffic_sign_unknown=0\n"
"uint8                 traffic_sign_school_zone=1\n"
"uint8                 traffic_sign_speed_bump=2\n"
"\n"
"uint8                 traffic_light_unknown=0\n"
"uint8                 traffic_light_red=1\n"
"uint8                 traffic_light_red_left=2\n"
"uint8                 traffic_light_yellow=3\n"
"uint8                 traffic_light_green=4\n"
"uint8                 traffic_light_green_left=5\n"
"\n"
"uint8                 speed_limit_5=5\n"
"uint8                 speed_limit_10=10\n"
"uint8                 speed_limit_15=15\n"
"uint8                 speed_limit_20=20\n"
"uint8                 speed_limit_30=30\n"
"uint8                 speed_limit_40=40\n"
"uint8                 speed_limit_50=50\n"
"uint8                 speed_limit_60=60\n"
"uint8                 speed_limit_70=70\n"
"uint8                 speed_limit_80=80\n"
"uint8                 speed_limit_90=90\n"
"uint8                 speed_limit_100=100\n"
"\n"
"float32               remaining_time\n"
"\n"
"geometry_msgs/Point[] refers\n"
"geometry_msgs/Point[] ref_line\n"
"geometry_msgs/Point[] cancels\n"
"geometry_msgs/Point[] cancel_line\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/Relation\n"
"int64 id \n"
"uint8 relation\n"
"uint8 unknown=0\n"
"uint8 lane_keeping=1\n"
"uint8 change_left=2\n"
"uint8 change_right=3\n"
"uint8 adjacent_left=4\n"
"uint8 adjacent_right=5\n"
"uint8 conflict=6\n"
"uint8 area=7\n"
;
  }

  static const char* value(const ::brain_msgs::Area_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::Area_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.type);
      stream.next(m.outer);
      stream.next(m.inners);
      stream.next(m.regulatory_elements);
      stream.next(m.relation_from);
      stream.next(m.relation_to);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Area_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::Area_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::Area_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "outer: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.outer);
    s << indent << "inners[]" << std::endl;
    for (size_t i = 0; i < v.inners.size(); ++i)
    {
      s << indent << "  inners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.inners[i]);
    }
    s << indent << "regulatory_elements[]" << std::endl;
    for (size_t i = 0; i < v.regulatory_elements.size(); ++i)
    {
      s << indent << "  regulatory_elements[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >::stream(s, indent + "    ", v.regulatory_elements[i]);
    }
    s << indent << "relation_from[]" << std::endl;
    for (size_t i = 0; i < v.relation_from.size(); ++i)
    {
      s << indent << "  relation_from[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::Relation_<ContainerAllocator> >::stream(s, indent + "    ", v.relation_from[i]);
    }
    s << indent << "relation_to[]" << std::endl;
    for (size_t i = 0; i < v.relation_to.size(); ++i)
    {
      s << indent << "  relation_to[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::Relation_<ContainerAllocator> >::stream(s, indent + "    ", v.relation_to[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_AREA_H
