// Generated by gencpp from file brain_msgs/Path.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_PATH_H
#define BRAIN_MSGS_MESSAGE_PATH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <brain_msgs/PathNode.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct Path_
{
  typedef Path_<ContainerAllocator> Type;

  Path_()
    : header()
    , nodes()
    , behavior(0)
    , subtype(0)
    , state(0)  {
    }
  Path_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , nodes(_alloc)
    , behavior(0)
    , subtype(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::brain_msgs::PathNode_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::PathNode_<ContainerAllocator> >> _nodes_type;
  _nodes_type nodes;

   typedef uint8_t _behavior_type;
  _behavior_type behavior;

   typedef uint8_t _subtype_type;
  _subtype_type subtype;

   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(unknown)
  #undef unknown
#endif
#if defined(_WIN32) && defined(onroad)
  #undef onroad
#endif
#if defined(_WIN32) && defined(parking)
  #undef parking
#endif
#if defined(_WIN32) && defined(emergency)
  #undef emergency
#endif
#if defined(_WIN32) && defined(lane_keeping)
  #undef lane_keeping
#endif
#if defined(_WIN32) && defined(lane_keeping_left_turn)
  #undef lane_keeping_left_turn
#endif
#if defined(_WIN32) && defined(lane_keeping_right_turn)
  #undef lane_keeping_right_turn
#endif
#if defined(_WIN32) && defined(lane_keeping_u_turn)
  #undef lane_keeping_u_turn
#endif
#if defined(_WIN32) && defined(change_left)
  #undef change_left
#endif
#if defined(_WIN32) && defined(change_right)
  #undef change_right
#endif
#if defined(_WIN32) && defined(approaching_parking)
  #undef approaching_parking
#endif
#if defined(_WIN32) && defined(perpendicular_parking)
  #undef perpendicular_parking
#endif
#if defined(_WIN32) && defined(parallel_parking)
  #undef parallel_parking
#endif
#if defined(_WIN32) && defined(angular_parking)
  #undef angular_parking
#endif
#if defined(_WIN32) && defined(pull_over)
  #undef pull_over
#endif
#if defined(_WIN32) && defined(return_to_lane)
  #undef return_to_lane
#endif
#if defined(_WIN32) && defined(pull_over_and_stop)
  #undef pull_over_and_stop
#endif
#if defined(_WIN32) && defined(in_lane_stop)
  #undef in_lane_stop
#endif
#if defined(_WIN32) && defined(ready)
  #undef ready
#endif
#if defined(_WIN32) && defined(ongoing)
  #undef ongoing
#endif
#if defined(_WIN32) && defined(complete)
  #undef complete
#endif

  enum {
    unknown = 0u,
    onroad = 1u,
    parking = 2u,
    emergency = 3u,
    lane_keeping = 1u,
    lane_keeping_left_turn = 2u,
    lane_keeping_right_turn = 3u,
    lane_keeping_u_turn = 4u,
    change_left = 5u,
    change_right = 6u,
    approaching_parking = 7u,
    perpendicular_parking = 8u,
    parallel_parking = 9u,
    angular_parking = 10u,
    pull_over = 11u,
    return_to_lane = 12u,
    pull_over_and_stop = 13u,
    in_lane_stop = 14u,
    ready = 0u,
    ongoing = 1u,
    complete = 2u,
  };


  typedef boost::shared_ptr< ::brain_msgs::Path_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::Path_<ContainerAllocator> const> ConstPtr;

}; // struct Path_

typedef ::brain_msgs::Path_<std::allocator<void> > Path;

typedef boost::shared_ptr< ::brain_msgs::Path > PathPtr;
typedef boost::shared_ptr< ::brain_msgs::Path const> PathConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::Path_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::Path_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::Path_<ContainerAllocator1> & lhs, const ::brain_msgs::Path_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.nodes == rhs.nodes &&
    lhs.behavior == rhs.behavior &&
    lhs.subtype == rhs.subtype &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::Path_<ContainerAllocator1> & lhs, const ::brain_msgs::Path_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Path_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Path_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Path_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Path_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Path_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "987483714de98cabe4eb9dd0e6f7f0e2";
  }

  static const char* value(const ::brain_msgs::Path_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x987483714de98cabULL;
  static const uint64_t static_value2 = 0xe4eb9dd0e6f7f0e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/Path";
  }

  static const char* value(const ::brain_msgs::Path_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::Path_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header       header \n"
"brain_msgs/PathNode[] nodes\n"
"\n"
"uint8 behavior\n"
"uint8 unknown=0\n"
"uint8 onroad=1\n"
"uint8 parking=2\n"
"uint8 emergency=3\n"
"\n"
"uint8 subtype\n"
"uint8 lane_keeping=1\n"
"uint8 lane_keeping_left_turn=2\n"
"uint8 lane_keeping_right_turn=3\n"
"uint8 lane_keeping_u_turn=4\n"
"uint8 change_left=5\n"
"uint8 change_right=6\n"
"uint8 approaching_parking=7\n"
"uint8 perpendicular_parking=8\n"
"uint8 parallel_parking=9\n"
"uint8 angular_parking=10\n"
"uint8 pull_over=11\n"
"uint8 return_to_lane=12\n"
"uint8 pull_over_and_stop=13\n"
"uint8 in_lane_stop=14\n"
"\n"
"uint8 state\n"
"uint8 ready=0\n"
"uint8 ongoing=1\n"
"uint8 complete=2\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/PathNode\n"
"geometry_msgs/Pose pose\n"
"int8               dir\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::brain_msgs::Path_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::Path_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.nodes);
      stream.next(m.behavior);
      stream.next(m.subtype);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Path_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::Path_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::Path_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "nodes[]" << std::endl;
    for (size_t i = 0; i < v.nodes.size(); ++i)
    {
      s << indent << "  nodes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::PathNode_<ContainerAllocator> >::stream(s, indent + "    ", v.nodes[i]);
    }
    s << indent << "behavior: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.behavior);
    s << indent << "subtype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.subtype);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_PATH_H
