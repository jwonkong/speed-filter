// Generated by gencpp from file brain_msgs/VehicleState.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_VEHICLESTATE_H
#define BRAIN_MSGS_MESSAGE_VEHICLESTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <nav_msgs/Odometry.h>
#include <brain_msgs/Wgs84.h>
#include <brain_msgs/Wgs84.h>
#include <brain_msgs/Gear.h>
#include <brain_msgs/TurnSignal.h>
#include <brain_msgs/MultiFunctionSwitch.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct VehicleState_
{
  typedef VehicleState_<ContainerAllocator> Type;

  VehicleState_()
    : header()
    , odometry()
    , gnss()
    , reference()
    , speed(0.0)
    , longitudinal_acceleration(0.0)
    , lateral_acceleration(0.0)
    , steering_angle(0.0)
    , gear()
    , turn_signal()
    , mfs()  {
    }
  VehicleState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , odometry(_alloc)
    , gnss(_alloc)
    , reference(_alloc)
    , speed(0.0)
    , longitudinal_acceleration(0.0)
    , lateral_acceleration(0.0)
    , steering_angle(0.0)
    , gear(_alloc)
    , turn_signal(_alloc)
    , mfs(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::nav_msgs::Odometry_<ContainerAllocator>  _odometry_type;
  _odometry_type odometry;

   typedef  ::brain_msgs::Wgs84_<ContainerAllocator>  _gnss_type;
  _gnss_type gnss;

   typedef  ::brain_msgs::Wgs84_<ContainerAllocator>  _reference_type;
  _reference_type reference;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _longitudinal_acceleration_type;
  _longitudinal_acceleration_type longitudinal_acceleration;

   typedef float _lateral_acceleration_type;
  _lateral_acceleration_type lateral_acceleration;

   typedef float _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef  ::brain_msgs::Gear_<ContainerAllocator>  _gear_type;
  _gear_type gear;

   typedef  ::brain_msgs::TurnSignal_<ContainerAllocator>  _turn_signal_type;
  _turn_signal_type turn_signal;

   typedef  ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator>  _mfs_type;
  _mfs_type mfs;





  typedef boost::shared_ptr< ::brain_msgs::VehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::VehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleState_

typedef ::brain_msgs::VehicleState_<std::allocator<void> > VehicleState;

typedef boost::shared_ptr< ::brain_msgs::VehicleState > VehicleStatePtr;
typedef boost::shared_ptr< ::brain_msgs::VehicleState const> VehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::VehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::VehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::VehicleState_<ContainerAllocator1> & lhs, const ::brain_msgs::VehicleState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.odometry == rhs.odometry &&
    lhs.gnss == rhs.gnss &&
    lhs.reference == rhs.reference &&
    lhs.speed == rhs.speed &&
    lhs.longitudinal_acceleration == rhs.longitudinal_acceleration &&
    lhs.lateral_acceleration == rhs.lateral_acceleration &&
    lhs.steering_angle == rhs.steering_angle &&
    lhs.gear == rhs.gear &&
    lhs.turn_signal == rhs.turn_signal &&
    lhs.mfs == rhs.mfs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::VehicleState_<ContainerAllocator1> & lhs, const ::brain_msgs::VehicleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::VehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::VehicleState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dbf53046d6bc8a6c06ada5cc5b63b93c";
  }

  static const char* value(const ::brain_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdbf53046d6bc8a6cULL;
  static const uint64_t static_value2 = 0x06ada5cc5b63b93cULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/VehicleState";
  }

  static const char* value(const ::brain_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header                 header \n"
"\n"
"# odometry\n"
"nav_msgs/Odometry               odometry\n"
"brain_msgs/Wgs84                gnss\n"
"brain_msgs/Wgs84                reference\n"
"\n"
"# chassis\n"
"float32                         speed\n"
"float32                         longitudinal_acceleration\n"
"float32                         lateral_acceleration\n"
"float32                         steering_angle\n"
"brain_msgs/Gear                 gear\n"
"\n"
"# body\n"
"brain_msgs/TurnSignal           turn_signal\n"
"brain_msgs/MultiFunctionSwitch  mfs\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: brain_msgs/Wgs84\n"
"float64 latitude\n"
"float64 longitude\n"
"float32 height\n"
"float32 heading\n"
"uint8 status\n"
"uint8 valid=0\n"
"uint8 invalid=1\n"
"================================================================================\n"
"MSG: brain_msgs/Gear\n"
"uint8 gear\n"
"uint8 inactive=0\n"
"uint8 gear_p=1\n"
"uint8 gear_r=2\n"
"uint8 gear_n=3\n"
"uint8 gear_d=4\n"
"================================================================================\n"
"MSG: brain_msgs/TurnSignal\n"
"uint8 signal\n"
"uint8 off=0\n"
"uint8 left=1\n"
"uint8 right=2\n"
"uint8 hazard=3\n"
"================================================================================\n"
"MSG: brain_msgs/MultiFunctionSwitch\n"
"uint8 mfs\n"
"uint8 off=0\n"
"uint8 left=1\n"
"uint8 right=2\n"
;
  }

  static const char* value(const ::brain_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::VehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.odometry);
      stream.next(m.gnss);
      stream.next(m.reference);
      stream.next(m.speed);
      stream.next(m.longitudinal_acceleration);
      stream.next(m.lateral_acceleration);
      stream.next(m.steering_angle);
      stream.next(m.gear);
      stream.next(m.turn_signal);
      stream.next(m.mfs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::VehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::VehicleState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "odometry: ";
    s << std::endl;
    Printer< ::nav_msgs::Odometry_<ContainerAllocator> >::stream(s, indent + "  ", v.odometry);
    s << indent << "gnss: ";
    s << std::endl;
    Printer< ::brain_msgs::Wgs84_<ContainerAllocator> >::stream(s, indent + "  ", v.gnss);
    s << indent << "reference: ";
    s << std::endl;
    Printer< ::brain_msgs::Wgs84_<ContainerAllocator> >::stream(s, indent + "  ", v.reference);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "longitudinal_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.longitudinal_acceleration);
    s << indent << "lateral_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_acceleration);
    s << indent << "steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "gear: ";
    s << std::endl;
    Printer< ::brain_msgs::Gear_<ContainerAllocator> >::stream(s, indent + "  ", v.gear);
    s << indent << "turn_signal: ";
    s << std::endl;
    Printer< ::brain_msgs::TurnSignal_<ContainerAllocator> >::stream(s, indent + "  ", v.turn_signal);
    s << indent << "mfs: ";
    s << std::endl;
    Printer< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >::stream(s, indent + "  ", v.mfs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_VEHICLESTATE_H
