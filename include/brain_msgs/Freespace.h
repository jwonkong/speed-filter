// Generated by gencpp from file brain_msgs/Freespace.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_FREESPACE_H
#define BRAIN_MSGS_MESSAGE_FREESPACE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <brain_msgs/FreespacePoint.h>
#include <geometry_msgs/Polygon.h>
#include <geometry_msgs/Polygon.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct Freespace_
{
  typedef Freespace_<ContainerAllocator> Type;

  Freespace_()
    : header()
    , type(0)
    , resolution(0.0)
    , width(0)
    , height(0)
    , origin()
    , data()
    , points()
    , outer()
    , inners()  {
    }
  Freespace_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(0)
    , resolution(0.0)
    , width(0)
    , height(0)
    , origin(_alloc)
    , data(_alloc)
    , points(_alloc)
    , outer(_alloc)
    , inners(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _type_type;
  _type_type type;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _height_type;
  _height_type height;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _data_type;
  _data_type data;

   typedef std::vector< ::brain_msgs::FreespacePoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::brain_msgs::FreespacePoint_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef  ::geometry_msgs::Polygon_<ContainerAllocator>  _outer_type;
  _outer_type outer;

   typedef std::vector< ::geometry_msgs::Polygon_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Polygon_<ContainerAllocator> >> _inners_type;
  _inners_type inners;





  typedef boost::shared_ptr< ::brain_msgs::Freespace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::Freespace_<ContainerAllocator> const> ConstPtr;

}; // struct Freespace_

typedef ::brain_msgs::Freespace_<std::allocator<void> > Freespace;

typedef boost::shared_ptr< ::brain_msgs::Freespace > FreespacePtr;
typedef boost::shared_ptr< ::brain_msgs::Freespace const> FreespaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::Freespace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::Freespace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::Freespace_<ContainerAllocator1> & lhs, const ::brain_msgs::Freespace_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.resolution == rhs.resolution &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.origin == rhs.origin &&
    lhs.data == rhs.data &&
    lhs.points == rhs.points &&
    lhs.outer == rhs.outer &&
    lhs.inners == rhs.inners;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::Freespace_<ContainerAllocator1> & lhs, const ::brain_msgs::Freespace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Freespace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Freespace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Freespace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Freespace_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Freespace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Freespace_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::Freespace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b688c8111c6718d00c3f4fed855e43b9";
  }

  static const char* value(const ::brain_msgs::Freespace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb688c8111c6718d0ULL;
  static const uint64_t static_value2 = 0x0c3f4fed855e43b9ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::Freespace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/Freespace";
  }

  static const char* value(const ::brain_msgs::Freespace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::Freespace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header \n"
"\n"
"uint8 type\n"
"\n"
"# base: grid map type \n"
"float32 resolution\n"
"uint32 width\n"
"uint32 height\n"
"geometry_msgs/Pose origin\n"
"int8[] data\n"
"\n"
"# points type\n"
"FreespacePoint[] points\n"
"\n"
"# polygon type\n"
"geometry_msgs/Polygon outer\n"
"geometry_msgs/Polygon[] inners\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/FreespacePoint\n"
"float32 distance\n"
"float32 yaw\n"
"float32 probability\n"
"================================================================================\n"
"MSG: geometry_msgs/Polygon\n"
"#A specification of a polygon where the first and last points are assumed to be connected\n"
"Point32[] points\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point32\n"
"# This contains the position of a point in free space(with 32 bits of precision).\n"
"# It is recommeded to use Point wherever possible instead of Point32.  \n"
"# \n"
"# This recommendation is to promote interoperability.  \n"
"#\n"
"# This message is designed to take up less space when sending\n"
"# lots of points at once, as in the case of a PointCloud.  \n"
"\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
;
  }

  static const char* value(const ::brain_msgs::Freespace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::Freespace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.resolution);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.origin);
      stream.next(m.data);
      stream.next(m.points);
      stream.next(m.outer);
      stream.next(m.inners);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Freespace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::Freespace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::Freespace_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::brain_msgs::FreespacePoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "outer: ";
    s << std::endl;
    Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "  ", v.outer);
    s << indent << "inners[]" << std::endl;
    for (size_t i = 0; i < v.inners.size(); ++i)
    {
      s << indent << "  inners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Polygon_<ContainerAllocator> >::stream(s, indent + "    ", v.inners[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_FREESPACE_H
