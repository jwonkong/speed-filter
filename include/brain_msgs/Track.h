// Generated by gencpp from file brain_msgs/Track.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_TRACK_H
#define BRAIN_MSGS_MESSAGE_TRACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct Track_
{
  typedef Track_<ContainerAllocator> Type;

  Track_()
    : header()
    , id(0)
    , state()
    , state_descriptor()
    , covariance()
    , initial_time()
    , update_time()
    , update_count(0.0)
    , gate()
    , status(0)
    , model(0)  {
    }
  Track_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(0)
    , state(_alloc)
    , state_descriptor(_alloc)
    , covariance(_alloc)
    , initial_time()
    , update_time()
    , update_count(0.0)
    , gate(_alloc)
    , status(0)
    , model(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _id_type;
  _id_type id;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _state_type;
  _state_type state;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _state_descriptor_type;
  _state_descriptor_type state_descriptor;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _covariance_type;
  _covariance_type covariance;

   typedef ros::Time _initial_time_type;
  _initial_time_type initial_time;

   typedef ros::Time _update_time_type;
  _update_time_type update_time;

   typedef double _update_count_type;
  _update_count_type update_count;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _gate_type;
  _gate_type gate;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _model_type;
  _model_type model;





  typedef boost::shared_ptr< ::brain_msgs::Track_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::Track_<ContainerAllocator> const> ConstPtr;

}; // struct Track_

typedef ::brain_msgs::Track_<std::allocator<void> > Track;

typedef boost::shared_ptr< ::brain_msgs::Track > TrackPtr;
typedef boost::shared_ptr< ::brain_msgs::Track const> TrackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::Track_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::Track_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::Track_<ContainerAllocator1> & lhs, const ::brain_msgs::Track_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.state == rhs.state &&
    lhs.state_descriptor == rhs.state_descriptor &&
    lhs.covariance == rhs.covariance &&
    lhs.initial_time == rhs.initial_time &&
    lhs.update_time == rhs.update_time &&
    lhs.update_count == rhs.update_count &&
    lhs.gate == rhs.gate &&
    lhs.status == rhs.status &&
    lhs.model == rhs.model;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::Track_<ContainerAllocator1> & lhs, const ::brain_msgs::Track_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Track_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::Track_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Track_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::Track_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fe19b479b83ffa3300fb14533450d070";
  }

  static const char* value(const ::brain_msgs::Track_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfe19b479b83ffa33ULL;
  static const uint64_t static_value2 = 0x00fb14533450d070ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/Track";
  }

  static const char* value(const ::brain_msgs::Track_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::Track_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"int64 id\n"
"float64[] state\n"
"string[] state_descriptor\n"
"float64[] covariance\n"
"time initial_time\n"
"time update_time\n"
"float64 update_count\n"
"float64[] gate\n"
"uint8 status\n"
"uint8 model\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::brain_msgs::Track_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::Track_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.state);
      stream.next(m.state_descriptor);
      stream.next(m.covariance);
      stream.next(m.initial_time);
      stream.next(m.update_time);
      stream.next(m.update_count);
      stream.next(m.gate);
      stream.next(m.status);
      stream.next(m.model);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Track_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::Track_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::Track_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.state[i]);
    }
    s << indent << "state_descriptor[]" << std::endl;
    for (size_t i = 0; i < v.state_descriptor.size(); ++i)
    {
      s << indent << "  state_descriptor[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state_descriptor[i]);
    }
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "initial_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.initial_time);
    s << indent << "update_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.update_time);
    s << indent << "update_count: ";
    Printer<double>::stream(s, indent + "  ", v.update_count);
    s << indent << "gate[]" << std::endl;
    for (size_t i = 0; i < v.gate.size(); ++i)
    {
      s << indent << "  gate[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gate[i]);
    }
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "model: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.model);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_TRACK_H
