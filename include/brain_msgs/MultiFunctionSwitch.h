// Generated by gencpp from file brain_msgs/MultiFunctionSwitch.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_MULTIFUNCTIONSWITCH_H
#define BRAIN_MSGS_MESSAGE_MULTIFUNCTIONSWITCH_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace brain_msgs
{
template <class ContainerAllocator>
struct MultiFunctionSwitch_
{
  typedef MultiFunctionSwitch_<ContainerAllocator> Type;

  MultiFunctionSwitch_()
    : mfs(0)  {
    }
  MultiFunctionSwitch_(const ContainerAllocator& _alloc)
    : mfs(0)  {
  (void)_alloc;
    }



   typedef uint8_t _mfs_type;
  _mfs_type mfs;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(off)
  #undef off
#endif
#if defined(_WIN32) && defined(left)
  #undef left
#endif
#if defined(_WIN32) && defined(right)
  #undef right
#endif

  enum {
    off = 0u,
    left = 1u,
    right = 2u,
  };


  typedef boost::shared_ptr< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> const> ConstPtr;

}; // struct MultiFunctionSwitch_

typedef ::brain_msgs::MultiFunctionSwitch_<std::allocator<void> > MultiFunctionSwitch;

typedef boost::shared_ptr< ::brain_msgs::MultiFunctionSwitch > MultiFunctionSwitchPtr;
typedef boost::shared_ptr< ::brain_msgs::MultiFunctionSwitch const> MultiFunctionSwitchConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator1> & lhs, const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator2> & rhs)
{
  return lhs.mfs == rhs.mfs;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator1> & lhs, const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d93352ea66d15ffd5b0ef19a62207247";
  }

  static const char* value(const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd93352ea66d15ffdULL;
  static const uint64_t static_value2 = 0x5b0ef19a62207247ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/MultiFunctionSwitch";
  }

  static const char* value(const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 mfs\n"
"uint8 off=0\n"
"uint8 left=1\n"
"uint8 right=2\n"
;
  }

  static const char* value(const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mfs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MultiFunctionSwitch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::MultiFunctionSwitch_<ContainerAllocator>& v)
  {
    s << indent << "mfs: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mfs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_MULTIFUNCTIONSWITCH_H
