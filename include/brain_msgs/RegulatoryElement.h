// Generated by gencpp from file brain_msgs/RegulatoryElement.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_REGULATORYELEMENT_H
#define BRAIN_MSGS_MESSAGE_REGULATORYELEMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct RegulatoryElement_
{
  typedef RegulatoryElement_<ContainerAllocator> Type;

  RegulatoryElement_()
    : id(0)
    , intersection_id(0)
    , group_id(0)
    , type(0)
    , subtype(0)
    , remaining_time(0.0)
    , refers()
    , ref_line()
    , cancels()
    , cancel_line()  {
    }
  RegulatoryElement_(const ContainerAllocator& _alloc)
    : id(0)
    , intersection_id(0)
    , group_id(0)
    , type(0)
    , subtype(0)
    , remaining_time(0.0)
    , refers(_alloc)
    , ref_line(_alloc)
    , cancels(_alloc)
    , cancel_line(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef int64_t _intersection_id_type;
  _intersection_id_type intersection_id;

   typedef int64_t _group_id_type;
  _group_id_type group_id;

   typedef uint8_t _type_type;
  _type_type type;

   typedef uint8_t _subtype_type;
  _subtype_type subtype;

   typedef float _remaining_time_type;
  _remaining_time_type remaining_time;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _refers_type;
  _refers_type refers;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _ref_line_type;
  _ref_line_type ref_line;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _cancels_type;
  _cancels_type cancels;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _cancel_line_type;
  _cancel_line_type cancel_line;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(traffic_sign)
  #undef traffic_sign
#endif
#if defined(_WIN32) && defined(traffic_light)
  #undef traffic_light
#endif
#if defined(_WIN32) && defined(speed_limit)
  #undef speed_limit
#endif
#if defined(_WIN32) && defined(right_of_way)
  #undef right_of_way
#endif
#if defined(_WIN32) && defined(all_way_stop)
  #undef all_way_stop
#endif
#if defined(_WIN32) && defined(traffic_sign_unknown)
  #undef traffic_sign_unknown
#endif
#if defined(_WIN32) && defined(traffic_sign_school_zone)
  #undef traffic_sign_school_zone
#endif
#if defined(_WIN32) && defined(traffic_sign_speed_bump)
  #undef traffic_sign_speed_bump
#endif
#if defined(_WIN32) && defined(traffic_light_unknown)
  #undef traffic_light_unknown
#endif
#if defined(_WIN32) && defined(traffic_light_red)
  #undef traffic_light_red
#endif
#if defined(_WIN32) && defined(traffic_light_red_left)
  #undef traffic_light_red_left
#endif
#if defined(_WIN32) && defined(traffic_light_yellow)
  #undef traffic_light_yellow
#endif
#if defined(_WIN32) && defined(traffic_light_green)
  #undef traffic_light_green
#endif
#if defined(_WIN32) && defined(traffic_light_green_left)
  #undef traffic_light_green_left
#endif
#if defined(_WIN32) && defined(speed_limit_5)
  #undef speed_limit_5
#endif
#if defined(_WIN32) && defined(speed_limit_10)
  #undef speed_limit_10
#endif
#if defined(_WIN32) && defined(speed_limit_15)
  #undef speed_limit_15
#endif
#if defined(_WIN32) && defined(speed_limit_20)
  #undef speed_limit_20
#endif
#if defined(_WIN32) && defined(speed_limit_30)
  #undef speed_limit_30
#endif
#if defined(_WIN32) && defined(speed_limit_40)
  #undef speed_limit_40
#endif
#if defined(_WIN32) && defined(speed_limit_50)
  #undef speed_limit_50
#endif
#if defined(_WIN32) && defined(speed_limit_60)
  #undef speed_limit_60
#endif
#if defined(_WIN32) && defined(speed_limit_70)
  #undef speed_limit_70
#endif
#if defined(_WIN32) && defined(speed_limit_80)
  #undef speed_limit_80
#endif
#if defined(_WIN32) && defined(speed_limit_90)
  #undef speed_limit_90
#endif
#if defined(_WIN32) && defined(speed_limit_100)
  #undef speed_limit_100
#endif

  enum {
    traffic_sign = 0u,
    traffic_light = 1u,
    speed_limit = 2u,
    right_of_way = 3u,
    all_way_stop = 4u,
    traffic_sign_unknown = 0u,
    traffic_sign_school_zone = 1u,
    traffic_sign_speed_bump = 2u,
    traffic_light_unknown = 0u,
    traffic_light_red = 1u,
    traffic_light_red_left = 2u,
    traffic_light_yellow = 3u,
    traffic_light_green = 4u,
    traffic_light_green_left = 5u,
    speed_limit_5 = 5u,
    speed_limit_10 = 10u,
    speed_limit_15 = 15u,
    speed_limit_20 = 20u,
    speed_limit_30 = 30u,
    speed_limit_40 = 40u,
    speed_limit_50 = 50u,
    speed_limit_60 = 60u,
    speed_limit_70 = 70u,
    speed_limit_80 = 80u,
    speed_limit_90 = 90u,
    speed_limit_100 = 100u,
  };


  typedef boost::shared_ptr< ::brain_msgs::RegulatoryElement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::RegulatoryElement_<ContainerAllocator> const> ConstPtr;

}; // struct RegulatoryElement_

typedef ::brain_msgs::RegulatoryElement_<std::allocator<void> > RegulatoryElement;

typedef boost::shared_ptr< ::brain_msgs::RegulatoryElement > RegulatoryElementPtr;
typedef boost::shared_ptr< ::brain_msgs::RegulatoryElement const> RegulatoryElementConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::RegulatoryElement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::RegulatoryElement_<ContainerAllocator1> & lhs, const ::brain_msgs::RegulatoryElement_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.intersection_id == rhs.intersection_id &&
    lhs.group_id == rhs.group_id &&
    lhs.type == rhs.type &&
    lhs.subtype == rhs.subtype &&
    lhs.remaining_time == rhs.remaining_time &&
    lhs.refers == rhs.refers &&
    lhs.ref_line == rhs.ref_line &&
    lhs.cancels == rhs.cancels &&
    lhs.cancel_line == rhs.cancel_line;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::RegulatoryElement_<ContainerAllocator1> & lhs, const ::brain_msgs::RegulatoryElement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::RegulatoryElement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::RegulatoryElement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::RegulatoryElement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "91a5a20310fccc30a716c9c1db74cb49";
  }

  static const char* value(const ::brain_msgs::RegulatoryElement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x91a5a20310fccc30ULL;
  static const uint64_t static_value2 = 0xa716c9c1db74cb49ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/RegulatoryElement";
  }

  static const char* value(const ::brain_msgs::RegulatoryElement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64                 id\n"
"int64                 intersection_id\n"
"int64                 group_id\n"
"\n"
"uint8                 type\n"
"uint8                 traffic_sign=0\n"
"uint8                 traffic_light=1\n"
"uint8                 speed_limit=2\n"
"uint8                 right_of_way=3\n"
"uint8                 all_way_stop=4\n"
"\n"
"uint8                 subtype\n"
"\n"
"uint8                 traffic_sign_unknown=0\n"
"uint8                 traffic_sign_school_zone=1\n"
"uint8                 traffic_sign_speed_bump=2\n"
"\n"
"uint8                 traffic_light_unknown=0\n"
"uint8                 traffic_light_red=1\n"
"uint8                 traffic_light_red_left=2\n"
"uint8                 traffic_light_yellow=3\n"
"uint8                 traffic_light_green=4\n"
"uint8                 traffic_light_green_left=5\n"
"\n"
"uint8                 speed_limit_5=5\n"
"uint8                 speed_limit_10=10\n"
"uint8                 speed_limit_15=15\n"
"uint8                 speed_limit_20=20\n"
"uint8                 speed_limit_30=30\n"
"uint8                 speed_limit_40=40\n"
"uint8                 speed_limit_50=50\n"
"uint8                 speed_limit_60=60\n"
"uint8                 speed_limit_70=70\n"
"uint8                 speed_limit_80=80\n"
"uint8                 speed_limit_90=90\n"
"uint8                 speed_limit_100=100\n"
"\n"
"float32               remaining_time\n"
"\n"
"geometry_msgs/Point[] refers\n"
"geometry_msgs/Point[] ref_line\n"
"geometry_msgs/Point[] cancels\n"
"geometry_msgs/Point[] cancel_line\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::brain_msgs::RegulatoryElement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.intersection_id);
      stream.next(m.group_id);
      stream.next(m.type);
      stream.next(m.subtype);
      stream.next(m.remaining_time);
      stream.next(m.refers);
      stream.next(m.ref_line);
      stream.next(m.cancels);
      stream.next(m.cancel_line);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RegulatoryElement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::RegulatoryElement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::RegulatoryElement_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "intersection_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.intersection_id);
    s << indent << "group_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.group_id);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "subtype: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.subtype);
    s << indent << "remaining_time: ";
    Printer<float>::stream(s, indent + "  ", v.remaining_time);
    s << indent << "refers[]" << std::endl;
    for (size_t i = 0; i < v.refers.size(); ++i)
    {
      s << indent << "  refers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.refers[i]);
    }
    s << indent << "ref_line[]" << std::endl;
    for (size_t i = 0; i < v.ref_line.size(); ++i)
    {
      s << indent << "  ref_line[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.ref_line[i]);
    }
    s << indent << "cancels[]" << std::endl;
    for (size_t i = 0; i < v.cancels.size(); ++i)
    {
      s << indent << "  cancels[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.cancels[i]);
    }
    s << indent << "cancel_line[]" << std::endl;
    for (size_t i = 0; i < v.cancel_line.size(); ++i)
    {
      s << indent << "  cancel_line[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.cancel_line[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_REGULATORYELEMENT_H
