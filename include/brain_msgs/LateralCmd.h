// Generated by gencpp from file brain_msgs/LateralCmd.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_LATERALCMD_H
#define BRAIN_MSGS_MESSAGE_LATERALCMD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct LateralCmd_
{
  typedef LateralCmd_<ContainerAllocator> Type;

  LateralCmd_()
    : header()
    , mode(0)
    , steering_angle(0.0)
    , steering_angle_rate(0.0)
    , steering_torque(0.0)
    , torque_limit(0.0)
    , lateral_error(0.0)
    , heading_error(0.0)  {
    }
  LateralCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(0)
    , steering_angle(0.0)
    , steering_angle_rate(0.0)
    , steering_torque(0.0)
    , torque_limit(0.0)
    , lateral_error(0.0)
    , heading_error(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef float _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef float _steering_angle_rate_type;
  _steering_angle_rate_type steering_angle_rate;

   typedef float _steering_torque_type;
  _steering_torque_type steering_torque;

   typedef float _torque_limit_type;
  _torque_limit_type torque_limit;

   typedef float _lateral_error_type;
  _lateral_error_type lateral_error;

   typedef float _heading_error_type;
  _heading_error_type heading_error;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(inactive)
  #undef inactive
#endif
#if defined(_WIN32) && defined(angle)
  #undef angle
#endif
#if defined(_WIN32) && defined(torque)
  #undef torque
#endif

  enum {
    inactive = 0u,
    angle = 1u,
    torque = 2u,
  };


  typedef boost::shared_ptr< ::brain_msgs::LateralCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::LateralCmd_<ContainerAllocator> const> ConstPtr;

}; // struct LateralCmd_

typedef ::brain_msgs::LateralCmd_<std::allocator<void> > LateralCmd;

typedef boost::shared_ptr< ::brain_msgs::LateralCmd > LateralCmdPtr;
typedef boost::shared_ptr< ::brain_msgs::LateralCmd const> LateralCmdConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::LateralCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::LateralCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::LateralCmd_<ContainerAllocator1> & lhs, const ::brain_msgs::LateralCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.mode == rhs.mode &&
    lhs.steering_angle == rhs.steering_angle &&
    lhs.steering_angle_rate == rhs.steering_angle_rate &&
    lhs.steering_torque == rhs.steering_torque &&
    lhs.torque_limit == rhs.torque_limit &&
    lhs.lateral_error == rhs.lateral_error &&
    lhs.heading_error == rhs.heading_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::LateralCmd_<ContainerAllocator1> & lhs, const ::brain_msgs::LateralCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::LateralCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::LateralCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::LateralCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::LateralCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::LateralCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::LateralCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::LateralCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3dbb07c1f91914b8e864eae8e046acd1";
  }

  static const char* value(const ::brain_msgs::LateralCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3dbb07c1f91914b8ULL;
  static const uint64_t static_value2 = 0xe864eae8e046acd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::LateralCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/LateralCmd";
  }

  static const char* value(const ::brain_msgs::LateralCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::LateralCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header  header\n"
"\n"
"uint8 mode\n"
"uint8 inactive=0\n"
"uint8 angle=1\n"
"uint8 torque=2\n"
"\n"
"float32 steering_angle\n"
"float32 steering_angle_rate\n"
"float32 steering_torque\n"
"float32 torque_limit\n"
"float32 lateral_error\n"
"float32 heading_error\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::brain_msgs::LateralCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::LateralCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.steering_angle);
      stream.next(m.steering_angle_rate);
      stream.next(m.steering_torque);
      stream.next(m.torque_limit);
      stream.next(m.lateral_error);
      stream.next(m.heading_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LateralCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::LateralCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::LateralCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "steering_angle_rate: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle_rate);
    s << indent << "steering_torque: ";
    Printer<float>::stream(s, indent + "  ", v.steering_torque);
    s << indent << "torque_limit: ";
    Printer<float>::stream(s, indent + "  ", v.torque_limit);
    s << indent << "lateral_error: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_error);
    s << indent << "heading_error: ";
    Printer<float>::stream(s, indent + "  ", v.heading_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_LATERALCMD_H
