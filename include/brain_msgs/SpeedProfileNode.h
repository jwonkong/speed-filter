// Generated by gencpp from file brain_msgs/SpeedProfileNode.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_SPEEDPROFILENODE_H
#define BRAIN_MSGS_MESSAGE_SPEEDPROFILENODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace brain_msgs
{
template <class ContainerAllocator>
struct SpeedProfileNode_
{
  typedef SpeedProfileNode_<ContainerAllocator> Type;

  SpeedProfileNode_()
    : distance(0.0)
    , speed(0.0)
    , time(0.0)
    , direction(0)  {
    }
  SpeedProfileNode_(const ContainerAllocator& _alloc)
    : distance(0.0)
    , speed(0.0)
    , time(0.0)
    , direction(0)  {
  (void)_alloc;
    }



   typedef float _distance_type;
  _distance_type distance;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _time_type;
  _time_type time;

   typedef int8_t _direction_type;
  _direction_type direction;





  typedef boost::shared_ptr< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> const> ConstPtr;

}; // struct SpeedProfileNode_

typedef ::brain_msgs::SpeedProfileNode_<std::allocator<void> > SpeedProfileNode;

typedef boost::shared_ptr< ::brain_msgs::SpeedProfileNode > SpeedProfileNodePtr;
typedef boost::shared_ptr< ::brain_msgs::SpeedProfileNode const> SpeedProfileNodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::SpeedProfileNode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::SpeedProfileNode_<ContainerAllocator1> & lhs, const ::brain_msgs::SpeedProfileNode_<ContainerAllocator2> & rhs)
{
  return lhs.distance == rhs.distance &&
    lhs.speed == rhs.speed &&
    lhs.time == rhs.time &&
    lhs.direction == rhs.direction;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::SpeedProfileNode_<ContainerAllocator1> & lhs, const ::brain_msgs::SpeedProfileNode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f9147366ff792478db5403d902d673e4";
  }

  static const char* value(const ::brain_msgs::SpeedProfileNode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf9147366ff792478ULL;
  static const uint64_t static_value2 = 0xdb5403d902d673e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/SpeedProfileNode";
  }

  static const char* value(const ::brain_msgs::SpeedProfileNode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 distance\n"
"float32 speed\n"
"float32 time\n"
"int8 direction\n"
;
  }

  static const char* value(const ::brain_msgs::SpeedProfileNode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance);
      stream.next(m.speed);
      stream.next(m.time);
      stream.next(m.direction);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeedProfileNode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::SpeedProfileNode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::SpeedProfileNode_<ContainerAllocator>& v)
  {
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "time: ";
    Printer<float>::stream(s, indent + "  ", v.time);
    s << indent << "direction: ";
    Printer<int8_t>::stream(s, indent + "  ", v.direction);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_SPEEDPROFILENODE_H
