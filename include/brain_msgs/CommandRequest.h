// Generated by gencpp from file brain_msgs/CommandRequest.msg
// DO NOT EDIT!


#ifndef BRAIN_MSGS_MESSAGE_COMMANDREQUEST_H
#define BRAIN_MSGS_MESSAGE_COMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <brain_msgs/LongitudinalCmd.h>
#include <brain_msgs/LateralCmd.h>
#include <brain_msgs/AccessoryCmd.h>

namespace brain_msgs
{
template <class ContainerAllocator>
struct CommandRequest_
{
  typedef CommandRequest_<ContainerAllocator> Type;

  CommandRequest_()
    : header()
    , longitudinal_command()
    , lateral_command()
    , accessory_command()  {
    }
  CommandRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , longitudinal_command(_alloc)
    , lateral_command(_alloc)
    , accessory_command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::brain_msgs::LongitudinalCmd_<ContainerAllocator>  _longitudinal_command_type;
  _longitudinal_command_type longitudinal_command;

   typedef  ::brain_msgs::LateralCmd_<ContainerAllocator>  _lateral_command_type;
  _lateral_command_type lateral_command;

   typedef  ::brain_msgs::AccessoryCmd_<ContainerAllocator>  _accessory_command_type;
  _accessory_command_type accessory_command;





  typedef boost::shared_ptr< ::brain_msgs::CommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::brain_msgs::CommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CommandRequest_

typedef ::brain_msgs::CommandRequest_<std::allocator<void> > CommandRequest;

typedef boost::shared_ptr< ::brain_msgs::CommandRequest > CommandRequestPtr;
typedef boost::shared_ptr< ::brain_msgs::CommandRequest const> CommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::brain_msgs::CommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::brain_msgs::CommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::brain_msgs::CommandRequest_<ContainerAllocator1> & lhs, const ::brain_msgs::CommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.longitudinal_command == rhs.longitudinal_command &&
    lhs.lateral_command == rhs.lateral_command &&
    lhs.accessory_command == rhs.accessory_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::brain_msgs::CommandRequest_<ContainerAllocator1> & lhs, const ::brain_msgs::CommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace brain_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::CommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::brain_msgs::CommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::CommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::brain_msgs::CommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::CommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::brain_msgs::CommandRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::brain_msgs::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d61371690bc0a0de07ade6d93d5079a1";
  }

  static const char* value(const ::brain_msgs::CommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd61371690bc0a0deULL;
  static const uint64_t static_value2 = 0x07ade6d93d5079a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::brain_msgs::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "brain_msgs/CommandRequest";
  }

  static const char* value(const ::brain_msgs::CommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::brain_msgs::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header             header\n"
"\n"
"brain_msgs/LongitudinalCmd  longitudinal_command\n"
"brain_msgs/LateralCmd       lateral_command\n"
"brain_msgs/AccessoryCmd     accessory_command\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: brain_msgs/LongitudinalCmd\n"
"std_msgs/Header header\n"
"\n"
"uint8 mode \n"
"uint8 inactive=0\n"
"uint8 mode_acceleration=1\n"
"uint8 mode_torque=2\n"
"uint8 mode_pedal_position=3\n"
"uint8 mode_pedal_torque=4\n"
"uint8 mode_acc_pos_brk_torque=5\n"
"uint8 mode_acc_torque_brk_pos=6\n"
"\n"
"float32 velocity\n"
"float32 acceleration\n"
"float32 torque\n"
"float32 acc_pos\n"
"float32 acc_torque\n"
"float32 brk_pos\n"
"float32 brk_torque \n"
"float32 distance_error\n"
"float32 speed_error\n"
"\n"
"brain_msgs/Gear gear\n"
"================================================================================\n"
"MSG: brain_msgs/Gear\n"
"uint8 gear\n"
"uint8 inactive=0\n"
"uint8 gear_p=1\n"
"uint8 gear_r=2\n"
"uint8 gear_n=3\n"
"uint8 gear_d=4\n"
"================================================================================\n"
"MSG: brain_msgs/LateralCmd\n"
"std_msgs/Header  header\n"
"\n"
"uint8 mode\n"
"uint8 inactive=0\n"
"uint8 angle=1\n"
"uint8 torque=2\n"
"\n"
"float32 steering_angle\n"
"float32 steering_angle_rate\n"
"float32 steering_torque\n"
"float32 torque_limit\n"
"float32 lateral_error\n"
"float32 heading_error\n"
"================================================================================\n"
"MSG: brain_msgs/AccessoryCmd\n"
"std_msgs/Header        header \n"
"\n"
"brain_msgs/TurnSignal  signal\n"
"\n"
"uint8 door_lock\n"
"uint8 unlock=0\n"
"uint8 locked=1\n"
"\n"
"uint8 door_open_right\n"
"uint8 door_open_left\n"
"uint8 inactive=0\n"
"uint8 closed=1\n"
"uint8 open=2\n"
"================================================================================\n"
"MSG: brain_msgs/TurnSignal\n"
"uint8 signal\n"
"uint8 off=0\n"
"uint8 left=1\n"
"uint8 right=2\n"
"uint8 hazard=3\n"
;
  }

  static const char* value(const ::brain_msgs::CommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::brain_msgs::CommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.longitudinal_command);
      stream.next(m.lateral_command);
      stream.next(m.accessory_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::brain_msgs::CommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::brain_msgs::CommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "longitudinal_command: ";
    s << std::endl;
    Printer< ::brain_msgs::LongitudinalCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.longitudinal_command);
    s << indent << "lateral_command: ";
    s << std::endl;
    Printer< ::brain_msgs::LateralCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.lateral_command);
    s << indent << "accessory_command: ";
    s << std::endl;
    Printer< ::brain_msgs::AccessoryCmd_<ContainerAllocator> >::stream(s, indent + "  ", v.accessory_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BRAIN_MSGS_MESSAGE_COMMANDREQUEST_H
